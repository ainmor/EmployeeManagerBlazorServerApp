@page "/employees/list/{currentPage:int?}"
@inject IDbContextFactory<ApplicationDbContext> ContextFactory;
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@inject IJSRuntime JsRuntime

<PageTitle>Employee Overview</PageTitle>

<h1>Employees</h1>


@if (Employees is null)
{
    <div>Loading...</div>
}
else
{
    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage - 1)">Previous</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="/employees/list/@i">@i</a>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="/employees/list/@(CurrentPage + 1)">Next</a>
        </li>
    </ul>
    
    <table class="table table-striped">
        <thead>
        <tr>
            <th>#</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>Is Developer</th>
            <th>Department</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var employee in Employees)
        {
            <tr>
                <td class="btn-group-sm">
                    <a href="/employees/edit/@employee.Id" class="btn btn-outline-primary">Edit</a>
                    <button class="btn btn-outline-danger" @onclick="() => HandleDelete(employee)">Delete</button>
                </td>
                <td>@employee.FirstName</td>
                <td>@employee.LastName</td>
                <td>@employee.IsDeveloper</td>
                <td>@employee.Department?.Name</td>

            </tr>
        }
        </tbody>
    </table>
}

@code {
   private Employee[]? Employees { get; set; }
   private const int ItemsPerPage = 5;
   private int TotalPages { get; set; }

   [Parameter]
   public int? CurrentPage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

   private async Task LoadData()
   {
       if (CurrentPage is null or < 1)
       {
           NavigationManager.NavigateTo("/employees/list/1");
           return;
       }

      await using var context = await ContextFactory.CreateDbContextAsync();
      var employeeCount = await context.Employees.CountAsync();
      TotalPages = employeeCount == 0 ? 1 : (int)System.Math.Ceiling((double)employeeCount / ItemsPerPage);

       if (CurrentPage > TotalPages)
       {
           NavigationManager.NavigateTo(($"/employees/list/{TotalPages}"));
           return;
       }

       StateContainer.EmployeeOverviewPage = CurrentPage.Value;
       
      var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;
       
      Employees = await context.Employees
          .Include(emp =>emp.Department)
          .OrderBy(emp => emp.FirstName)
          .Skip(itemsToSkip)
          .Take(ItemsPerPage)
          .ToArrayAsync();
   }

    private async Task HandleDelete(Employee employee)
    {
        var isOk = await JsRuntime.InvokeAsync<bool>("confirm", 
            $"Delete employee {employee.FirstName} {employee.LastName}?");

        if (isOk)
        {
            await using var context = await ContextFactory.CreateDbContextAsync();
            context.Employees.Remove(employee);
            await context.SaveChangesAsync();

            await LoadData();
        }
    }
}