@page "/employees/list/{currentPage:int?}"
@inject IDbContextFactory<ApplicationDbContext> ContextFactory;

<PageTitle>Employee Overview</PageTitle>

<h1>Employees</h1>


@if (Employees is null)
{
    <div>Loading...</div>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>FirstName</th>
            <th>LastName</th>
            <th>Is Developer</th>
            <th>Depoartment</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var employee in Employees)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.IsDeveloper</td>
                    <td>@employee.Department?.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
   private Employee[]? Employees { get; set; }
   private const int ItemsPerPage = 5;
    
   [Parameter]
   public int? CurrentPage { get; set; }

   protected override async Task OnParametersSetAsync()
   {
       if (CurrentPage is null)
       {
           CurrentPage = 1;
       }
       
      using var context = ContextFactory.CreateDbContext();
      var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;
       
      Employees = await context.Employees
          .Include(emp =>emp.Department)
          .OrderBy(emp => emp.FirstName)
          .Skip(itemsToSkip)
          .Take(ItemsPerPage)
          .ToArrayAsync();
   }

}